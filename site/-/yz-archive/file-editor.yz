<title>file-editor</title>
<meta attribute=src type=String>
<meta method=move>
<meta method=markError>

<template mode=closed delegates-focus=true>
	<code-editor .language="$.language"></code-editor>
</template>
<script>

import('/-/js/file-system/index.js')
	.then(({fileSystem}) => $.fileSystem = fileSystem)

const {codeEditor} = elements

$.language = 'txt'
$.uuid = ''

effect(async () => {
	if(!$.fileSystem) return
	if(!$.src) return $.uuid = ''
	$.uuid = (await $.fileSystem.findUuid(entry => entry.src == $.src))
		?? await $.fileSystem.create($.src, '')
	this.dispatchEvent(new CustomEvent('fileupdate'))
})

effect(async () => {
	const entry = await $.fileSystem?.get($.uuid)
	codeEditor.value = entry?.file || ''
})
effect(() => $.language = $.src.split('.').at(-1) || 'txt')

connected(() => {
	when(codeEditor).inputs().debounce(500)
		.await(() => $.fileSystem?.update($.uuid, codeEditor.value))
		.then(() => this.dispatchEvent(new CustomEvent('fileupdate')))

	when(this).fileupdates().or(when(codeEditor).inputs())
		.debounce(2000)
		.then(() => this.dispatchEvent(new CustomEvent('idle')))
})

$.move = async src => {
	if(!$.src) return
	await $.fileSystem?.move($.uuid, src)
	$.src = src
	this.dispatchEvent(new CustomEvent('fileupdate'))
}

$.markError = options => codeEditor.markError(options)

</script>
<style>
:host {
	display: block; height: 300px;
}

code-editor {
	width: 100%; height: 100%; box-sizing: border-box;
}
</style>
