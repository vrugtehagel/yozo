<title>ui-number-input</title>
<meta attribute=value>
<meta attribute=min type=number>
<meta attribute=max type=number>
<meta attribute=step type=number default=1>
<meta property=value>
<meta form-associated>

<template mode=closed delegates-focus=true>
	<ui-button
		icon=minus
		.disabled="$.value - $.step < $.min"
		aria-label="Increment"
		@click="$.decrement()"
	></ui-button>
	<input
		type=number
		:min="$.min"
		:max="$.max"
	>
	<ui-button
		icon=plus
		.disabled="$.value + $.step > $.max"
		aria-label="Increment"
		@click="$.increment()"
	></ui-button>
</template>

<script>
live.link($.$attributes.$value, elements.input)

live.link($.$value, {
	get: () => {
		const result = Math.max($.min, Math.min($.$attributes.value, $.max))
		return isNaN(result) ? $.min : result
	},
	set: value => $.$attributes.value = value
})

when($.$value).changes().then(() => {
	this.dispatchEvent(new CustomEvent('input'))
	this.dispatchEvent(new CustomEvent('change'))
})

$.decrement = () => $.value -= $.step
$.increment = () => $.value += $.step
</script>

<style>
:host {
	display: flex; width: 11rem;
	gap: .25rem;
}
ui-button {
	height: 3rem;
	font-size: 2rem;
	line-height: 0;
}
ui-button:first-of-type {
	padding-left: .125rem;
	border-radius: 1.5rem .25rem .25rem 1.5rem;
}
ui-button:last-of-type {
	padding-right: .125rem;
	border-radius: .25rem 1.5rem 1.5rem .25rem;
}
ui-button:hover { background-color: var(--highlight-color); }
input {
	flex: 1 0 3rem;
	min-width: 3rem; height: 3rem; padding: 1rem 1.25rem; box-sizing: border-box;
	color: inherit; background-color: var(--highlight-color);
	border: none; border-radius: .75rem; outline: none;
	font-size: inherit; font-family: var(--font-monospace);
	text-align: center;
	-moz-appearance: textfield;
	transition: .2s;
}
ui-button:first-of-type:hover + input { border-radius: .25rem .75rem .75rem .25rem; }
input:has(+ ui-button:hover) { border-radius: .75rem .25rem .25rem .75rem; }
::-webkit-outer-spin-button, ::-webkit-inner-spin-button { display: none; }
</style>
