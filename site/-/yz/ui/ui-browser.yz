<title>ui-browser</title>
<meta method=navigate>
<meta method=reload>
<meta method=cancel>
<meta property=src readonly>
<meta property=status readonly>
<meta property=messenger readonly>
<meta event=statuschange>
<meta event=messengerload>

<template mode=closed delegates-focus=true>
	<div id=container tabindex=0>
		<div id=loading .hidden="$.status != 'loading'">
			<ui-icon type=spinner></ui-icon>
		</div>
		<div id=offline .hidden="$.status != 'offline'">
			<ui-icon type=offline></ui-icon>
			<p>You're offline!</p>
		</div>
		<div id=unreachable .hidden="$.status != 'unreachable'">
			<p>Unreachable</p>
		</div>
		<iframe :src="$.src" .hidden="$.status != 'complete'"></iframe>
		<div id=interrupted>
			<ui-icon type=cut></ui-icon>
			<p>Page load interrupted</p>
		</div>
	</div>
</template>

<script>
const iframe = query('iframe')

$.src = 'about:blank'
$.loading = false
$.online = true

live.link($.$status, () => {
	if(!$.online) return 'offline'
	if($.loading) return 'loading'
	if($.unreachable) return 'unreachable'
	return 'complete'
})

when($.$status).changes()
	.then(() => this.dispatchEvent(new CustomEvent('statuschange')))

function normalizeURL(src){
	src = src.trim()
	const isBlank = src == 'about:blank'
	if(src.startsWith('/')) src = `${window.location.origin}${src}`
	if(!src.match(/^https?:\/\//)) src = `https://${src}`
	try {
		const url = new URL(src)
		url.username = url.password = ''
		return {url, valid: true}
	} catch {
		return {url: new URL('about:blank'), valid: false}
	}
}

async function isUnreachable(url){
	const method = 'HEAD'
	const mode = 'no-cors'
	const controller = new AbortController
	const {signal} = controller
	monitor.add('undo', () => controller.abort())
	const options = {method, mode, signal}
	const response = await until(fetch(url, options).catch(() => null))
	return !response
}

$.navigate = purify(async src => {
	$.online = navigator.onLine
	$.loading = false
	$.unreachable = false
	$.messenger = null
	const {url, valid} = normalizeURL(src)
	if(!valid) throw Error(`"${src}" is not a valid URL`)
	$.loading = true
	const success = await until(when(iframe).loads().or(timeout(5000))
		.after(() => iframe.src = $.src = url.href)
		.once())
	const sameOrigin = url.origin == window.location.origin
	const isSandbox = sameOrigin && url.pathname.startsWith('/file/')
	const {ContextMessenger} = await until(import('/-/js/context-messenger/index.js'))
	if(!success) $.unreachable = await until(isUnreachable(url))
	else if(isSandbox) $.messenger = new ContextMessenger(iframe.contentWindow)
	$.loading = false
})

$.cancel = () => {
	if(!$.loading) return
	iframe.src = 'about:blank'
	$.loading = false
}

$.reload = async () => $.navigate($.src)

effect(async () => {
	if(!$.messenger) return
	await until($.messenger.ready())
	this.dispatchEvent(new CustomEvent('messengerload'))
})
</script>

<style>
:host {
	display: block;
}
#container {
	display: grid; width: 100%; height: 100%;
	place-items: stretch;
	overflow: hidden;
	& > div {
		display: flex;
		flex-direction: column; align-items: center; justify-content: center;
	}
}
iframe {
	background-color: white;
	border: none;
}
p { margin: 0; }
#offline, #interrupted {
	color: var(--comment-color);
	& ui-icon { width: 3rem; height: 3rem; }
}
#unreachable {
	background: no-repeat center / 100% 100% url("/-/img/play-unreachable.svg");
	& p {
		padding: 1rem 2rem;
		color: var(--text-color); background-color: black;
		font-weight: 900;
		text-transform: uppercase;
	}
}
:is(iframe, #loading, #unreachable, #offline)[hidden],
iframe[src="about:blank"],
iframe:not([src="about:blank"]) + #interrupted {
	display: none;
}
</style>
