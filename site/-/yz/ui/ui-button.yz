<title>ui-button</title>
<meta attribute=icon type=string>
<meta attribute=iconstate type=string>
<meta attribute=danger type=boolean>
<meta attribute=disabled type=boolean>
<meta method=activate>

<template mode=closed delegates-focus=true>
	<button :class="$.danger ? 'danger' : null" .disabled="$.disabled">
		<ui-icon #if="$.icon" :type="$.icon" :state="$.iconstate"></ui-icon>
		<slot></slot>
	</button>
</template>

<script>
const {button} = elements

$.activate = () => this.dispatchEvent(new CustomEvent('activate'))

effect(() => {
	if(!$.danger) return when(button).clicks().then($.activate)
	when(button).pointerdowns().then(() => {
		when(button).transitionends().once()
			.then($.activate)
			.until(when(document).pointerups())
	})
})
</script>

<style>
:host {
	display: inline-block; height: 3em;
	color: rgb(255 255 255 / 90%);
	border-radius: .75rem;
	transition: .2s;
	white-space: nowrap;
}
button {
	display: grid; width: 100%; height: 100%; padding: .75rem; margin: 0;
	grid: 100% / min-content;
	place-items: center start; gap: 0 .75rem;
	position: relative;
	color: inherit; background: none;
	border: none; border-radius: inherit; outline: none;
	font-size: inherit; line-height: inherit; font-family: inherit;
	overflow: clip;
	cursor: pointer;
	&:focus-visible { box-shadow: 0 0 0 .25rem var(--keyword-color); }
	&:disabled { pointer-events: none; }
	:host(:not(:empty)) & {
		grid: 100% / min-content 1fr;
		padding: .75rem 1rem;
	}
}
:host([disabled]){
	opacity: .4;
	pointer-events: none;
}
:host([danger]) button {
	&::after {
		content: "";
		display: block; height: 0;
		position: absolute; inset: auto 0 0 0;
		background-color: var(--error-color);
		mix-blend-mode: lighten;
		transition: 0s;
	}
	&:active::after {
		height: 100%;
		transition: height 1s cubic-bezier(0, .3, 0, .3);
	}
}
ui-icon {
	width: 1.5rem; height: 1.5rem; padding: 0; box-sizing: border-box;
}
:host(:not(:empty)) slot {
	max-width: 100%; display: inline;
	overflow: hidden; text-overflow: ellipsis;
	white-space: nowrap;
}
</style>

