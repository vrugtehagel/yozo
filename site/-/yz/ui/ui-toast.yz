<title>ui-toast</title>
<meta attribute=type type=string>
<meta attribute=actiontext type=string as=actionText>
<meta attribute=open type=boolean>
<meta method=show>

<template mode=closed>
	<ui-icon :type="$.type"></ui-icon>
	<slot></slot>
	<ui-button #if="$.actionText" @click="$.action()"
	>{{ $.actionText }}</ui-button>
</template>

<script>
$.action = () => {
	this.dispatchEvent(new CustomEvent('action'))
}

$.show = async (duration = 5000) => {
	const appendAndRemove = !this.isConnected
	if(appendAndRemove) document.body.append(this)
	$.open = false
	await until(paint())
	$.open = true
	await until(when(this).actions().or(timeout(duration)))
	$.open = false
	await until(when(this).transitionends()
		.if(({target}) => target == this).once())
	if(appendAndRemove) this.remove()
}
</script>

<style>
:host([type=info]){ --toast-color: var(--name-color); }
:host([type=warning]){ --toast-color: var(--string-color); }
:host([type=danger]){ --toast-color: var(--error-color); }

:host {
	display: flex; width: max-content; max-width: 80%; padding: .5rem 2rem .5rem .5rem;
	gap: .5rem;
	position: fixed; inset: auto 1rem 1rem auto; z-index: 2000;
	background-color: var(--background-color);
	border-radius: 0 1rem 1rem 0; border-left: medium solid var(--toast-color);
	box-shadow: 0 0 20px 3px var(--sub-background-color);
	visibility: hidden; opacity: 0;
	transition: opacity .2s, visibility 0s .2s;
}
:host([open]){
	visibility: visible; opacity: 1;
	transition: opacity .2s, visibility 0s;
}
ui-icon {
	color: var(--toast-color);
}
slot {
	display: block;
	align-self: center;
}
ui-button {
	margin: 0 -1.5rem 0 2.5rem;
}
</style>
