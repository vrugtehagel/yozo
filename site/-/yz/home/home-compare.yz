<title>home-compare</title>

<template mode=closed>
	<menu>
		<li #for="id of ['yozo', 'lit', 'stencil', 'vanilla']">
			<ui-button @click="$.select(id)" .class-list.selected="$.selected == id"
			>{{ $.frameworks[id].name }}</ui-button>
		</li>
	</menu>
	<ui-loader .hidden="!$.loading"></ui-loader>
	<ui-code :language="$.language" .hidden="$.loading" .text-content="$.code"></ui-code>
	<ui-button .hidden="$.selected != 'yozo'" icon=external
		@click="$.openExternal($.examplePreset)"
	>See it live</ui-button>
</template>
<script>
$.selected
$.frameworks = {
	yozo: {name: 'Yozo', language: 'yz'},
	lit: {name: 'Lit', language: 'js'},
	stencil: {name: 'StencilJS', language: 'jsx'},
	vanilla: {name: 'Vanilla', language: 'js'}
}

live.link($.$language, () => $.frameworks[$.selected]?.language)

$.select = purify(async framework => {
	if($.selected == framework) return
	$.loading = true
	$.selected = framework
	const url = `/-/data/click-counter-${framework}.txt`
	const response = await until(fetch(url))
	const text = await until(response.text())
	$.code = text
	$.loading = false
})

connected(() => $.select('yozo')).once()

$.openExternal = async () => {
	const url = '/-/data/click-counter-play-example.json'
	const response = await fetch(url)
	const preset = await response.json()
	const proxy = window.open('/play/', '_blank')
	proxy.playManagerRequest = preset
}
</script>
<style>
:host {
	grid: auto 1fr / 1fr; gap: 1rem;
	position: relative;
}
menu {
	list-style: none;
	--columns: 4;
	display: grid; padding: 0; margin: 0;
	grid: auto / repeat(var(--columns), 1fr); gap: 1rem;
	@media (width < 450px){ --columns: 2; }
}
li {
	flex: 1 0 0;
	white-space: nowrap;
}
[hidden]{
	display: none;
}
ui-button {
	width: 100%;
	text-align: center;
	&.selected, &:hover { background-color: var(--highlight-color); }
}
ui-code, ui-loader {
	background-color: var(--sub-background-color);
	border-radius: 1rem;
}
ui-button[icon=external]{
	width: auto;
	color: var(--sub-background-color); background-color: var(--meta-color);
	position: absolute; inset: auto 2rem 2rem auto;
	transition: opacity .2s;
	&:hover { opacity: .8; }
}
</style>
