<title>site-search</title>
<meta attribute=value type=String>

<template mode=closed delegates-focus=true>
	<form
		method=GET
		action=/api/search
		@submit="$.onsubmit(event)"
	>
		<label id=label for=input>Search the site</label>
		<input
			id=input
			type=text
			name=q
			autocomplete=off
			autocapitalize=none
			autocorrect=off
			spellcheck=false
			enterkeyhint=go
			:class="$.value ? null : 'empty'"
			@keydown="$.onkeydown(event)"
			@focus="$.focused = true"
			@blur="$.focused = false"
		>
		<ul
			id=results
			.hidden="!$.focused || $.value == ''"
			:class="$.options.length == 0 ? 'no-results' : null"
		>
			<li
				#for="[index, option] of $.options.entries()"
				:class="index == $.selected ? 'selected' : null"
				:id="`option-${index}`"
				@mouseenter="$.selected = index"				
			>
				<a
					:href="option.url"
					:data-url="option.url.split('/').slice(1, -1).join(' â€º ')"
				>{{ option.title }}</a>
			</li>
		</ul>
		<ui-icon type=search></ui-icon>
	</form>
</template>
<script>
const {form, input, ul} = elements

$.focused = false
$.options = []
$.selected = 0
live.link($.$value, input)
live.link($.$amount, () => $.options.length)
// Fetch the options whenever the input value changes
effect(async () => {
	if($.value == '') return []
	const url = new URL(form.action)
	url.searchParams.set('q', $.value)
	// // const response = await until(fetch(url))
	// // $.options = await until(response.json())
	await until(timeout(1000))
	// if($.value.length > 6) return $.options = []
	// $.options = [{title: 'Found page for ' + $.value,url: '/docs/found/'}, {title: 'when().observes()',url: '/docs/when/observes/'}, ...(Math.random() < .5 ? [] : [{title: 'track.define()',url: '/docs/track/define/'}])]
	// $.selected = 0
	// await until(frame().once())
	// await until(frame().once())
})

// Keyboard shortcuts to navigate the dropdown
$.shortcuts = {
	ArrowDown: () => $.selected = ($.selected + 1) % $.amount,
	ArrowUp: () => $.selected = ($.selected + $.amount - 1) % $.amount,
	Home: () => $.selected = 0,
	End: () => $.selected = $.amount - 1,
}
$.onkeydown = event => {
	if(!$.shortcuts[event.key]) return
	event.preventDefault()
	$.shortcuts[event.key]()
}

// When the user confirms their search, navigate to selected option
$.onsubmit = event => {
	event.preventDefault()
	const li = ul.children[$.selected]
	li?.querySelector('a').click()
}

</script>
<style>
:host {
	display: inline-block;
	color: var(--text-color);
}
form {
	display: grid; width: 100%; height: 100%;
	grid-template: auto / 1fr 3rem; place-items: center start;
	position: relative;
}
label {
	grid-area: 1 / 1 / -1 / -1;
	padding: 0 1.25rem;
	opacity: 0;
	white-space: nowrap;
}
ui-icon {
	grid-area: 1 / 2 / -1 / -1;
	opacity: .5;
}
label:has(+ input.empty){ opacity: .5; }
input {
	grid-area: 1 / 1 / -1 / -1;
	width: 100%; min-width: 0; height: 3rem; padding: 1rem 1.25rem; box-sizing: border-box;
	color: inherit; background-color: var(--highlight-color);
	border: none; border-radius: .75rem; outline: none;
	font-size: inherit; font-family: var(--font-monospace);
	transition: border-radius .08s;
	&:has(+ ul:not([hidden])){ border-radius: .75rem .75rem 0 0; }
}
ul {
	display: flex; max-height: calc(60vh); padding: .25rem .5rem .5rem; margin: 0;
	flex-direction: column; gap: .5rem;
	list-style: none;
	position: absolute; inset: 100% 0 auto 0;
	background-color: var(--highlight-color);
	border-radius: 0 0 .75rem .75rem;
	overflow: auto;
	transition: opacity .2s, translate .2s, visibility 0s 0s;
	z-index: -1;
	&[hidden]{
		translate: 0 -1rem;
		opacity: 0; visibility: hidden;
		transition: opacity .2s, translate .2s, visibility .2s 0s;
	}
	&.no-results::after {
		content: "No results found.";
		display: block; padding: .5rem 1rem;
		color: var(--comment-color);
		background-color: var(--background-color);
		border-radius: .5rem;
	}
}
li {
	background-color: var(--background-color);
	border-radius: .5rem;
	box-shadow: 2rem 0 0 -2rem inset var(--name-color);
	transition: .2s;
	&.selected {
		background-color: var(--sub-background-color);
		border-radius: 3px .5rem .5rem 3px;
		box-shadow: calc(2rem + 3px) 0 0 -2rem inset var(--name-color);
	}
	a {
		display: flex; padding: .5rem 1rem;
		flex-direction: column;
		color: var(--text-color);
		text-decoration: none;
		&::after {
			content: attr(data-url);
			font-size: .8rem;
			color: var(--comment-color);
		}
	}
}
</style>
