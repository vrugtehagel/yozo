<title>site-settings</title>
<meta attribute=label type=string>
<meta attribute=exclude type=string>
<meta attribute=open type=boolean>

<template mode=closed>
	<ui-dropdown
		icon=settings :iconstate="$.open ? 'turned' : null" .open="$.open"
		:label="$.label || null" :aria-label="$.label ? null : 'Site settings'"
		exportparts="button, dropdown"
		.disabled="!$.siteSettings"
		@open="$.open = true" @close="$.open = false">
		<label #if="$.show('visual')">
			Semicolons
			<ui-switch .on="$.siteSettings?.$settings.semicolons"
				@change="$.siteSettings.$settings.semicolons = this.value"></ui-switch>
		</label>
		<label #if="$.show('functional')">
			Use tabs
			<ui-switch .on="$.siteSettings?.$settings.useTabs"
				@change="$.siteSettings.$settings.useTabs = this.value"></ui-switch>
		</label>
		<label #if="$.show('visual', 'functional')">
			Tab size
			<ui-number-input :value="$.siteSettings?.$settings.tabSize" min=2 max=8
				@change="$.siteSettings.$settings.tabSize = this.value"></ui-number-input>
		</label>
	</ui-dropdown>
</template>

<script>
import('/-/js/site-settings/index.js')
	.then(siteSettings => $.siteSettings = siteSettings)
const {uiDropdown} = elements

live.link($.$open, {
	get: () => uiDropdown.open,
	set: value => uiDropdown.open = value,
	changes: when(uiDropdown).opens()
		.or(when(uiDropdown).closes())
})

$.show = (...purposes) =>
	!purposes.every(purpose => $.exclude.split(/, */).includes(purpose))
</script>

<style>
:host {
	display: inline-block;
	position: relative;
	border-radius: .5rem;
}
ui-dropdown:not(:defined){ display: none; }
::part(dropdown){
	width: 20rem; padding: 1rem;
	gap: .5rem;
}
label {
	display: flex; min-height: 3rem; padding: 0 1rem;
	align-items: center;
}
label > :last-child { margin-left: auto; }
label > ui-switch { margin-right: .5rem; }
</style>
