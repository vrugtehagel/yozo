<title>docs-outline</title>

<template mode=closed>
	<nav></nav>
</template>

<script>
const article = document.querySelector('article')
const headers = article.querySelectorAll('h1,h2,h3,h4,h5,h6')
const nav = query('nav')

const inView = new Set
for(const header of headers){
	const level = Number(header.localName[1])
	const text = header.textContent.trim()
	header.id ||= text.toLowerCase()
		.replaceAll(/[^$\w]+/g, '-')
		.replaceAll(/^-|-$/g, '')
	const a = document.createElement('a')
	a.href = `#${header.id}`
	header.append(a.cloneNode(false))
	a.textContent = header.textContent
	a.dataset.level = level
	nav.append(a)

	const rootMargin = '-90px 0px -50%' // scroll-padding is 6rem (96px)
	const threshold = 1
	const options = {rootMargin, threshold}
	let firstTrigger = true
	when(header).observes('intersection', options).then(([entry]) => {
		const {isIntersecting} = entry
		const {y} = entry.boundingClientRect
		const intersectsAtTop = y < 100
		if(isIntersecting) inView.add(a)
		else inView.delete(a)
		if(firstTrigger) return firstTrigger = false
		if(isIntersecting && !intersectsAtTop && inView.size != 1) return
		if(!isIntersecting && !intersectsAtTop && inView.size > 0) return
		nav.querySelector('.current')?.classList.remove('current')
		if(isIntersecting) return a.classList.add('current')
		if(!intersectsAtTop)
			return a.previousElementSibling?.classList.add('current')
		if(inView.size == 0) return a.classList.add('current')
		return a.nextElementSibling.classList.add('current')
	})
}
</script>

<style>
:host {
	display: block; width: 100%; height: 100%;
}
nav {
	max-height: calc(100vh - 8rem);
	position: sticky; inset: 6.5rem auto 2rem auto;
	overflow: auto;
}
a {
	display: block; padding: .375rem 1.5rem; margin: .25rem 0;
	color: white;
	box-shadow: 5rem 0 0 calc(3px - 5rem) inset transparent;
	border-radius: .5rem;
	text-decoration: none;
	transition: background-color .2s, border-radius .2s, box-shadow .2s;
	&[data-level="1"]{ font-size: 1.5rem; }
	&:not([data-level="1"], [data-level="2"]){ padding-left: 2.5rem; }
	&:hover {
		background-color: var(--background-color);
	}
	&.current:not([data-level="1"]) {
		background-color: var(--background-color);
		border-radius: 3px .5rem .5rem .3px;
		box-shadow: 5rem 0 0 calc(3px - 5rem) inset var(--name-color);
	}
}
</style>
