<title>play-preview</title>
<meta attribute=src type=string>
<meta attribute=consoleopen type=boolean as=consoleOpen>

<template mode=closed>
	<div id=titlebar>
		<ui-button :icon="$.loading ? 'close' : 'repeat'" aria-label="Reload"
			@click="$.loading ? $.cancel() : $.go()"></ui-button>
		<ui-input .class-list.invalid="$.invalid" @enter="$.go()"></ui-input>
		<ui-button icon=close aria-label="Close" @click="$.close()"></ui-button>
	</div>
	<div id=view>
		<div id=page>
			<ui-browser></ui-browser>
			<div id=console-toggle .hidden="$.consoleDisabled">
				<ui-button icon="console" :iconstate="$.consoleOpen ? 'down' : null"
					@click="$.consoleOpen = !$.consoleOpen"></ui-button>
			</div>
			<div id=ping-lights .hidden="$.consoleDisabled">
				<div id=ping title="ping()"></div>
				<div id=pong title="pong()"></div>
			</div>
		</div>
		<div id=console-output></div>
	</div>
</template>

<script>
import('/-/js/play-manager/index.js').then(mod => $.playManager = mod)

const iframe = query('iframe')
const uiInput = query('ui-input')
const uiBrowser = query('ui-browser')
const consoleOutput = query('#console-output')
const ping = query('#ping')
const pong = query('#pong')

live.link($.$src, uiInput)
live.link($.$loading, {
	get: () => uiBrowser.status == 'loading',
	changes: when(uiBrowser).statuschanges()
})

$.blink = async element => {
	element.classList.add('on')
	await until(paint())
	element.classList.remove('on')
}
$.message = (severity, {message, line, column, src}) => {
	if(!$.consoleAutoOpened && !$.consoleOpen)
		$.consoleAutoOpened = $.consoleOpen = true
	const div = document.createElement('div')
	div.textContent = message
	div.classList.add('message', severity)
	consoleOutput.append(div)
	if(!src) return
	const filename = src.split('/').at(-1)
	const button = document.createElement('button')
	button.textContent = `${filename}:${line}:${column}`
	div.append(button)
	when(button).clicks().then(() => $.playManager.reveal(src))
}
$.close = () => this.dispatchEvent(new CustomEvent('close'))
$.cancel = () => uiBrowser.cancel?.()
$.go = purify(async () => {
	consoleOutput.replaceChildren()
	$.consoleDisabled = true
	$.consoleAutoOpened = false
	if(!$.playManager) await until(when($.$playManager).changes())
	await until(customElements.whenDefined('ui-browser'))
	const [{status}] = await until(Promise.allSettled([uiBrowser.navigate($.src)]))
	if(status == 'rejected'){
		const keyframes = [{backgroundColor: 'var(--error-color)', offset: 0}]
		uiInput.animate(keyframes, {duration: 500})
		return
	}
	if(uiBrowser.status != 'complete') $.src = uiBrowser.src
	else $.src = uiBrowser.src.replace(/^https:\/\/(?:www\.)?/, '')
	this.dispatchEvent(new CustomEvent('srcchange'))
	if(!uiBrowser.messenger) return
	when(uiBrowser).messengerloads().then(() => $.consoleDisabled = false)
	const {messenger} = uiBrowser
	when(messenger).pings().then(() => $.blink(ping))
	when(messenger).pongs().then(() => $.blink(pong))
	when(messenger).errors().or(when(messenger).logs())
		.then(({type, detail}) => $.message(type, detail.payload))
})

connected(() => {
	if(!$.src) return
	$.go()
})
</script>

<style>
:host {
	display: grid; padding: .75rem; box-sizing: border-box;
	grid: auto 1fr / 1fr; gap: .75rem;
	background-color: var(--background-color);
	border-radius: 1.5rem 1.5rem 1.25rem 1.25rem;
}
#titlebar {
	display: flex; padding: 0; margin: 0;
	align-items: center;
	list-style: none;
}
ui-button:hover, ::part(button):hover {
	background-color: var(--highlight-color);
}
ui-input {
	flex: 1 1 0;
	margin: 0 .75rem 0 .5rem;
}
ui-browser {
	width: 100%; height: 100%;
	border-radius: 1rem;
	overflow: clip;
}
#page {
	flex: 1 0 0;
	position: relative;
}
#view {
	display: flex; height: 100%; width: 100%;
	flex-direction: column; gap: .75rem;
}
#console-toggle {
	padding: .75rem .75rem 0 0;
	position: absolute; inset: auto auto 0 0; z-index: 1;
	background-color: var(--background-color);
	border-radius: 0 1.25rem 0 0;
	&[hidden]{ display: none; }
}
#ping-lights {
	display: flex; padding: .75rem 0 0 .75rem;
	gap: .75rem;
	position: absolute; inset: auto 0 0 auto; z-index: 1;
	background-color: var(--background-color);
	border-radius: 1.25rem 0 0 0;
	&[hidden]{ display: none; }
	& div {
		width: 1.5rem; height: 1.5rem;
		position: relative;
		border-radius: 50%;
		background-color: var(--comment-color);
		transition: .5s ease-out;
		&.on {
			transition: none;
			background-color: var(--light-color);
			box-shadow: 0 0 .75rem var(--light-color),
				0 0 .25rem var(--light-color);
		}
	}
}
#ping { --light-color: var(--keyword-color); }
#pong { --light-color: var(--name-color); }
#console-output {
	flex: 1 0 0;
	background-color: var(--sub-background-color);
	border-radius: .75rem;
	overflow: auto;
	transition: margin-top .2s, flex .3s;
	:host(:not([consoleopen])) & { flex: 0 0 0; margin-top: -.75rem; }
	.message {
		margin: .5rem; padding: .5rem 1rem;
		background-color: var(--background-color);
		border-radius: 3px .5rem .5rem 3px;
		box-shadow: 53px 0 0 -50px inset var(--message-color);
		&.error { --message-color: var(--error-color); }
		&.log { --message-color: var(--name-color); }
		&:not(.log){ color: var(--message-color); }
		&:first-child { border-top-left-radius: .5rem; }
		&:last-child { border-bottom-left-radius: .5rem; }
		& button {
			float: right;
			padding: 0 .5rem;
			color: inherit; background: none;
			font-size: inherit; line-height: inherit; font-family: inherit;
			border: none;
			&:not([disabled]){
				cursor: pointer;
				text-decoration: underline;
			}
		}
	}
}
</style>
