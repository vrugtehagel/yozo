<title>play-preview</title>
<meta attribute=src type=string>

<template mode=closed>
	<div id=titlebar>
		<ui-button :icon="$.loading ? 'close' : 'repeat'" aria-label="Reload"
			@click="$.loading ? $.cancel() : $.go()"></ui-button>
		<ui-input .class-list.invalid="$.invalid" @enter="$.go()"></ui-input>
		<ui-button icon=close aria-label="Close" @click="$.close()"></ui-button>
	</div>
	<ui-browser></ui-browser>
	<div id=ping-lights>
		<ui-icon id=ping type=ping></ui-icon>
		<ui-icon id=pong type=ping></ui-icon>
	</div>
</template>

<script>
const {iframe, uiInput, uiBrowser} = elements

live.link($.$src, uiInput)
live.link($.$loading, {
	get: () => uiBrowser.status == 'loading',
	changes: when(uiBrowser).statuschanges()
})

$.close = () => this.dispatchEvent(new CustomEvent('close'))
$.cancel = () => uiBrowser.cancel?.()
$.go = purify(async () => {
	await until(customElements.whenDefined('ui-browser'))
	try {
		await until(uiBrowser.navigate($.src))
	} catch {
		const keyframes = [{backgroundColor: 'var(--error-color)', offset: 0}]
		uiInput.animate(keyframes, {duration: 1000})
		return
	}
	$.src = uiBrowser.status == 'complete'
		? uiBrowser.src.replace(/^https:\/\/(?:www\.)?/, '')
		: uiBrowser.src
	uiBrowser.focus()
	this.dispatchEvent(new CustomEvent('srcchange'))
	if(!uiBrowser.messenger) return
	const {ping, pong} = elements
	when(uiBrowser.messenger).pings().then(() => {
		ping.animate([{color: 'var(--keyword-color)', offset: 0}], {duration: 1000})
	})
	when(uiBrowser.messenger).pongs().then(() => {
		pong.animate([{color: 'var(--name-color)', offset: 0}], {duration: 1000})
	})
})

connected(() => {
	if(!$.src) return
	$.go()
})
</script>

<style>
:host {
	display: grid; padding: .75rem; box-sizing: border-box;
	grid: auto 1fr / 1fr; gap: .75rem;
	background-color: var(--background-color);
	border-radius: 1.5rem;
	transition: opacity .2s, scale .2s, visibility 0s 0s;
}
:host([hidden]){
	scale: .95;
	opacity: 0; visibility: hidden;
	transition: opacity .2s, scale .2s, visibility 0s .2s;
}
#titlebar {
	display: flex; padding: 0; margin: 0;
	align-items: center;
	list-style: none;
}
ui-button:hover, ::part(button):hover {
	background-color: var(--highlight-color);
}
ui-input {
	flex: 1 1 0;
	margin: 0 .75rem 0 .5rem;
}
ui-browser {
	grid-area: 2 / 1;
	place-self: stretch;
	border-radius: 1rem;
	overflow: clip;
}
#ping-lights {
	grid-area: 2 / 1; place-self: end;
	display: flex; padding: .5rem 0 0 .5rem;
	flex-direction: row-reverse; gap: .25rem;
	z-index: 1;
	background-color: var(--background-color);
	border-radius: 1.25rem 0 0 0;
	& ui-icon {
		width: 3rem; height: 3rem; padding: 0;
		color: transparent;
	}
}
</style>
