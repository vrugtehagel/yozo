<title>play-toolbar</title>

<template mode=closed>
	<div id=controls .hidden="$.playManager?.$play.mode != 'editing'">
		<ui-button icon=arrow iconstate=left aria-label="Back"
			@click="$.playManager?.close()"></ui-button>
		<ui-dropdown icon=dots autoclose>
			<ui-button icon=edit
				@click="$.edit()">Rename</ui-button>
			<ui-button icon=save @click="$.playManager?.save()">Save</ui-button>
			<ui-button icon=duplicate @click="$.playManager?.duplicate()">Duplicate</ui-button>
			<ui-button icon=delete @click="$.playManager?.remove()">Delete</ui-button>
		</ui-dropdown>
		<ui-display-name :value="$.playManager?.current().name"
			@rename="$.playManager.rename(event.detail.fullValue)"
		></ui-display-name>
		<em id=saved .hidden="!$.playManager?.$play.saved">(saved)</em>
	</div>
	<ui-dropdown icon=layout :iconstate="$.playManager?.current().layout" autoclose
		.hidden="$.playManager?.$play.mode != 'editing'">
		<ui-button icon=layout iconstate=single aria-label="Single window"
			@click="$.playManager.current().layout = 'single'"></ui-button>
		<ui-button icon=layout iconstate=side-by-side aria-label="Two windows side-by-side"
			@click="$.playManager.current().layout = 'side-by-side'"></ui-button>
		<ui-button icon=layout iconstate=triple-split aria-label="Triple split"
			@click="$.playManager.current().layout = 'triple-split'"></ui-button>
		<ui-button icon=layout iconstate=stack aria-label="Stack two windows"
			@click="$.playManager.current().layout = 'stack'"></ui-button>
		<ui-button icon=layout iconstate=quartiles aria-label="Four quartiles"
			@click="$.playManager.current().layout = 'quartiles'"></ui-button>
	</ui-dropdown>
	<site-settings exclude=visual></site-settings>
	<ui-button id=nav-toggle icon=pointer :iconstate="$.navigationMenuHidden ? 'down' : 'up'"
		@click="$.navigationMenuHidden = !$.navigationMenuHidden"></ui-button>
</template>

<script>
import('/-/js/play-manager/index.js').then(mod => $.playManager = mod)

const uiDisplayName = query('ui-display-name')

$.edit = () => uiDisplayName.editing = true

effect(() => {
	const hidden = $.navigationMenuHidden
	const navigationMenu = document.querySelector('site-nav')
	if(!navigationMenu) return
	navigationMenu.hidden = hidden
})
</script>

<style>
:host {
	display: flex; padding: 0; margin: 0;
	gap: 1rem;
	z-index: 900;
}
[hidden]{ display: none; }
#controls {
	flex: 1;
	display: flex; padding: 0; margin: 0;
	align-items: center; gap: 1rem;
	&[hidden]{ visibility: hidden; }
}
site-settings::part(button):hover,
site-settings[open]::part(button),
ui-dropdown::part(button):hover,
ui-dropdown[open]::part(button),
ui-button:hover { background-color: var(--background-color); }
site-settings::part(dropdown){ inset: 3.5rem -4rem auto auto; }
ui-dropdown::part(dropdown){ width: 16rem; }
#controls > ui-dropdown::part(dropdown){ inset: 3.5rem auto auto 0; }
ui-dropdown ui-button:hover { background-color: var(--highlight-color); }
ui-display-name:not([editing]){ padding: 0 0 0 .5rem; }
ui-dropdown[icon=layout]::part(dropdown){
	width: auto;
	flex-direction: row;
	inset: 3.5rem auto auto 50%;
	transform: translateX(-50%);
}
#saved {
	color: var(--comment-color);
	font-style: normal;
}
#nav-toggle {
	position: relative;
	background-color: var(--background-color);
	border-radius: 50%;
	&:not(:defined){ display: block; width: 3rem; height: 3rem; }
	&:hover { background-color: var(--highlight-color); }
	&::before {
		content: "";
		width: 100%; height: 2.5rem;
		position: absolute; inset: auto auto 50% 0; z-index: -1;
		background-color: var(--background-color);
	}
	&::after {
		content: "";
		width: 1.5rem; height: 1.5rem;
		position: absolute; inset: -1rem 100% auto auto;
		background: no-repeat center / cover
			radial-gradient(circle 1.5rem at bottom left,
				transparent 0 100%, var(--background-color) 100%);
	}
}
</style>
