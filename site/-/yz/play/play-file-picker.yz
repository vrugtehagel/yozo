<title>play-file-picker</title>

<template mode=closed>
	<div id=file-picker>
		<ui-button
			id=add-file
			icon=plus
			@click="$.adding = true"
		>Add new file</ui-button>
		<ul .class-list.empty="$.uuids.length == 0 && !$.adding">
			<li #for="uuid of $.uuids">
				<ui-button
					icon=filetype
					:iconstate="$.webServer?.extension($.file(uuid).src)"
					@click="$.open(uuid)"
				>{{ $.file(uuid).src }}</ui-button>
			</li>
			<li
				id=new-file
				.hidden="!$.adding"
				@transitionend="$.adding && this.firstElementChild.focus()"
			>
				<ui-input
					prefix=/file/
					@enter="$.add()"
					@escape="$.adding = false"
				></ui-input>
				<ui-button icon=checkmark @click="$.add()"></ui-button>
				<ui-button icon=close @click="$.adding = false"></ui-button>
			</li>
		</ul>
	</div>
	<ui-button
		id=open-preview
		icon=browser-window
		@click="$.preview()"
	>Open preview</ui-button>
</template>

<script>
import('/-/js/play-manager/index.js')
	.then(playManager => $.playManager = playManager)
import('/-/js/web-server/index.js')
	.then(webServer => $.webServer = webServer)

const $files = window.$site.$play.$current.$files
const {newFile, uiInput} = elements

connected(() => {
	live.link($.$uuids, () => Object.keys($files))
})

$.file = uuid => $files[`$${uuid}`]
$.open = uuid =>
	this.dispatchEvent(new CustomEvent('open', {detail: {uuid}}))
$.preview = () =>
	this.dispatchEvent(new CustomEvent('preview'))

$.add = async () => {
	const {fullValue} = uiInput
	const src = fullValue.endsWith('/') ? `${fullValue}index.html` : fullValue
	const body = ''
	$.playManager?.create({src, body: ''})
	uiInput.value = ''
	$.adding = false
	newFile.style.setProperty('transition', 'none')
	await frame().once()
	await frame().once()
	newFile.style.removeProperty('transition')
}
</script>

<style>
:host {
	display: block; width: min(100% - 2rem, 28rem); padding: .75rem; box-sizing: border-box;
	background-color: var(--background-color);
	border-radius: 1.5rem;
}
#file-picker {
	padding: .5rem; margin: 0 0 .75rem;
	background-color: var(--sub-background-color);
	border-radius: 1rem;
}
#add-file { background-color: var(--background-color); }
#add-file, #open-preview { width: 100%; }
:is(#add-file, #open-preview):hover {
	background-color: var(--highlight-color);
}
#new-file {
	display: flex; height: 3rem;
	overflow: clip;
	transition: opacity .2s, height .2s, visibility 0s 0s;
}
#new-file[hidden]{
	height: 0;
	opacity: 0; visibility: hidden;
	transition: opacity .2s, height .2s, visibility 0s .2s;
}
#new-file ui-input {
	flex: 1 1 0;
	margin-right: .5rem;
}
ui-icon[type=spinner]{
	display: block; margin: .5rem auto 0;
}
ul {
	list-style: none;
	padding: 0; margin: .5rem 0 0;
	transition: margin-top .2s;
}
ul.empty { margin-top: 0; }
li ui-button:only-child { width: 100%; }
li ui-button:hover { background-color: var(--background-color); }
play-file-listing { width: 100%; }
</style>
