<title>play-file-listing</title>
<meta attribute=uuid type=string>
<meta attribute=readonly type=boolean>
<meta attribute=new>

<template mode=closed>
	<div id=read .hidden="$.renaming">
		<ui-button
			icon=filetype
			.iconstate="$.extension"
			@click="$.open()"
		>{{ $.$file.src }}</ui-button>
		<ui-button
			#if="!$.readonly"
			icon=edit
			aria-label="Rename"
			@click="$.renaming = true"
		></ui-button>
		<ui-button
			#if="!$.readonly"
			icon=delete
			danger
			aria-lable="Delete"
			@activate="$.delete()"
		></ui-button>
	</div>
	<div id=write .hidden="!$.renaming">
		<ui-input
			prefix="/file/"
			:value="$.$file.src?.slice(6) ?? ''"
			@enter="$.rename()"
		></ui-input>
		<ui-button
			icon=checkmark
			aria-label="Confirm"
			@click="$.rename()"
		></ui-button>
		<ui-button
			icon=close
			aria-label="Cancel"
			@click="$.cancel()"
		></ui-button>
	</div>
</template>

<script>
$.imports = {}
import('/-/js/file-system/index.js')
	.then(fileSystem => $.$imports.fileSystem = fileSystem)

$.renaming = false

when($.$attributes.$new).changes()
	.if(() => $.$attributes.new != null)
	.then(() => $.renaming = true)

connected(() => {
	live.link($.$file, () => $.$imports.fileSystem?.$files[$.uuid])
	live.link($.$extension, () => {
		if(!$.$file?.src) return ''
		const filename = $.$file.src.split('/').at(-1)
		const extension = filename.match(/^\.*[^\.].*\.(\w+)$/)?.[1]
		return extension ?? ''
	})
})

$.rename = async () => {
	const uuid = $.$attributes.new != null ? crypto.randomUUID() : $.uuid
	const src = `/file/${elements('ui-input').value}`
	const body = ''
	$.$imports.fileSystem.$files[uuid] = {src, body}
	this.dispatchEvent(new CustomEvent('rename'))
	await $.$imports.fileSystem.push()
	$.renaming = false
}
$.cancel = () => {
	this.dispatchEvent(new CustomEvent('cancel'))
	$.renaming = false
}
$.delete = async () => {
	delete $.$imports.fileSystem.$files[$.uuid]
	this.dispatchEvent(new CustomEvent('delete'))
	await $.$imports.fileSystem.push()
}
$.open = () => {
	this.dispatchEvent(new CustomEvent('open'))
}
</script>

<style>
:host {
	container: play-file-listing / inline-size;
}
#read, #write {
	display: flex;
	&[hidden]{ display: none; }
}
:host(:not(:hover)) #read ui-button:not(:first-child) {
	opacity: 0;
}
@container play-file-listing (width < 18rem) {
	 #read ui-button:not(:first-child) {
	 	display: none;
	}
}
:host(:not(:hover)) #read ui-button:nth-child(2){
	margin-left: -6rem;
}
:host(:hover) #read ui-button:not(:first-child){
	transition: all .2s, opacity .2s .08s;
}
ui-button:first-child, ui-input {
	flex: 1 1;
}
ui-button:hover {
	background-color: var(--background-color);
}
ui-input::part(prefix){
	color: var(--meta-color);
}
</style>
