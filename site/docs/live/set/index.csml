@script
	export const layout = 'docs'
	export const title = 'live.set()'
	export const description = 'The ``live.set()`` utility function sets a live variable to a certain value.'

h2 Syntax
ui-code
	live.set($live, value);

h3 Parameters
dl
	dt ``$live``
	dd > p A live variable, to set the value of.
	dt ``value``
	dd > p The value to set the live variable to.

h3 Return value
p A boolean; ``true`` if setting the variable was successful, ``false`` otherwise. Setting the variable will only fail if either the first arguent is not a live variable, or if the underlying data structure itself rejects the change.

h2 Examples

h3 Setting the root variable
p When setting up a live variable before having access to any of the data that will populate the live structure, it can be useful to be able to set the root variable directly rather than having to set each of its keys:

ui-code
	const $data = live(null);

	when($data.$bar.$baz).changes().then(() => {
		console.log('baz changed!');
	});

	// Laterâ€¦
	live.set($data, {
		foo: 23,
		bar: { baz: 'qux' }
	}); // baz changed!

p In above example, we __need__ ``live.set()`` in order to set the data, since we initially set it to ``null``. As such, ``$data.foo = 23`` would throw an error.

h2 Usage notes
p Often, setting a live variable is done through simply setting a property. It is simpler to read and understand, and therefore the preferred method. Within component definitions, where the instance receives [``$``](/docs/components/$/), using ``live.set()`` is generally unnecessary. 
