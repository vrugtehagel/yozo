@script
	export const layout = 'docs'
	export const title = 'Live: deepchange event'
	export const description = 'The ``deepchange`` event fires on live variables when a variable itself or one of its nested properties have changed.'

p This is a relatively low-level way of interacting with [live](/docs/live/) variables; often, using an [``effect()``](/docs/effect/) is more appropriate.

h2 Syntax

ui-code
	when($live).deepchanges().then(event => {
		/* … */
	});
	$live.addEventListener('deepchange', event => {
		/* … */
	});

h2 Event details

p This event exposes no additional details; it dispatches a generic native ``CustomEvent`` instance.

h2 Examples

h3 A live object in localStorage

p Let's say we have a live object (with nested properties) and we'd like to remember this object across page visits. To do this, we'll place it in ``localStorage`` and update the respective ``localStorage`` key every time the object changes.

ui-code
	const initial = { foo: { bar: 23 }};
	const stored = JSON.parse(localStorage.getItem('object'));
	const $object = live(stored ?? fallback);
	when($object).deepchanges().then(() => {
		const stringified = JSON.stringify(live.get($object));
		localStorage.setItem('object', stringified);
	});

p Now, when changing a nested property on our object (like ``$object.$foo.bar = 44``), then the listener triggers and saves the object in localStorage. Had we used the [``change``](/docs/live/change/) event instead, then the listener would have fired only when the value for the object itself changes (e.g. through ``live.set($object, {})``), rather than for all nested properties in the object.

h2 Usage notes

p The ``deepchange`` event always fires after any ``change`` and ``keychange`` events. Additionally, the ``deepchange`` event doesn't quite "bubble" in the same way events do on DOM elements; the propagation cannot be stopped.

h2 See also

ul
	li [live()](/docs/live/)
	li [Live: change event](/docs/live/change/)
	li [Live: keychange event](/docs/live/keychange/)
