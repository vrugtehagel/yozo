// Yozo helpers are in scope
const { monitor, Flow, live } = self.yozo;

// a flow creation is monitored
let clean = false;
const call = monitor(['undo'], () => {
	const flow = new Flow();
	flow.cleanup(() => clean = true);
});

// a monitored context is created with a flow and live variable
const $data = live({ foo: 23 });
let clean = false;
const call = monitor(['undo', 'live'], () => {
	const flow = new Flow();
	flow.cleanup(() => clean = true);
	$data.foo;
});

// the call is undone
call.undo();

// the live variable changes
$data.foo++;

// we're listening for changes to live dependencies
let changes = 0;
call.live.addEventListener('change', () => {
	changes++;
});

// a nested monitored context is set up
let inner;
let clean = false;
const outer = monitor(['undo'], () => {
	inner = monitor(['undo'], () => {
		const flow = new Flow();
		flow.cleanup(() => clean = true);
	});
});

// the outer call is undone
outer.undo();

// the inner call is undone
inner.undo();

// the call object lets us know one live variable changed
changes == 1

// the flow is cleaned up
clean

// the flow is not cleaned up
!clean

// TEST: Monitor can track flows
// Given Yozo helpers are in scope
// and a flow creation is monitored
// When the call is undone
// Then the flow is cleaned up

// TEST: Monitor tracks live variables and cleanups simultaneously
// Given Yozo helpers are in scope
// and a monitored context is created with a flow and live variable
// and we're listening for changes to live dependencies
// When the live variable changes
// Then the call object lets us know one live variable changed
// When the call is undone
// Then the flow is cleaned up

// TEST: Nesting monitored contexts pauses the outer one
// Given Yozo helpers are in scope
// and a nested monitored context is set up
// and the outer call is undone
// Verify the flow is not cleaned up
// When the inner call is undone
// Then the flow is cleaned up
