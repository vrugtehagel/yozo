@script
	export const layout = 'docs'
	export const title = 'when()'
	export const description = 'Through when(), write event listeners in a more readable and streamlined way.'

h2 Syntax

ui-code
	when(...targets).does(eventType);
	when(...targets).does(eventType, options);
	when(...targets)[readableType]();
	when(...targets)[readableType](options);

h3 Parameters
dl
	dt ``...targets``
	dd > p One or more ``EventTarget`` objects to attach a listener to.
	dt ``eventType``
	dd > p A string representing the event type to listen to. Equivalent to the first argument to ``.addEventListener()``.
	dt ``options`` [[optional]]
	dd > p An options object, which is passed as third argument to ``.addEventListener()``. The options ``once`` and ``signal`` are not recommended, as more appropriate alternatives are available (specifically, [``flow.once()``](/docs/flow/once/) and [``flow.until()``](/docs/flow/until/) or [``flow.stop()``](/docs/flow/stop/) respectively).
	dt ``readableType``
	dd > p Similar to ``eventType``, but with an extra rule for readability; a single trailing "s" will be stripped off from ``readableType`` to find the ``eventType``. This allows for much more English-sounding expressions such as ``when(button).clicks()`` or ``when(image).loads()``.

h3 Return value
p A [``Flow``](/docs/flow/) object that triggers whenever the event triggers on one of the targets. The dispatched event object is passed to the callbacks in the flow. To attach a simple listener like with ``.addEventListener()``, use the [``flow.then()``](/docs/flow/then/) method.

h2 Examples

h3 Basic usage
p Attaching simple listeners with ``when()`` is similar in shape to ``.addEventListener()``, just a tad more ergonomic and readable:

ui-code
	when(input).inputs().then(event => {
		console.log(event.key);
	});

	// which is similar to...
	input.addEventListener('input', event => {
		console.log(event.key);
	});

p There are a variety of advantages to using ``when()`` over ``.addEventListener()``, some of which more prominant than others. The main advantage is that the calls (since they create a ``Flow`` object) are [monitored](/docs/monitor/), which means the listeners are automatically taken down in certain contexts. For example, when writing a listener inside of the [``connected()``](/docs/components/connected/) callback of a component, the hook is monitoring the listeners created inside it and takes them down when the component disconnects. Without ``when()``, we'd need to manually take down the event listeners when the component disconnects. Another example of the monitoring is inside an ``effect()`` (which re-runs when any of its [live](/docs/live/) dependencies change):

ui-code
	effect(() => {
		const button = $.activeButton;
		when(button).clicks().then(() => {
			// do the thing…
		});
	});

p In short, it means we can stop worrying about excess event listeners that we forgot to take down, and we can focus on describing what our code does in a simple, concise manner.

h3 It flows

p As described above, in monitored contexts, we generally don't need to worry about taking down event listeners ourselves. However, that's not the only case where ``when()`` provides an ergonomic developer experience; since it returns a [flow](/docs/flow/), we get all the handy-dandy methods that come with flows. For example:

ui-code
	// debouncing events
	when(input).inputs().debounce(300).then(() => {
		// do heavy operation…
	});

	// combining event listeners
	when(button).mousedowns().or(
	when(button).touchstarts()).then(() => {
		// button active…
	});

	// stopping one event based on another
	when(box).pointerdowns().then(() => {
		when(document).pointermoves().then(() => {
			// render dragging…
		}).until(when(document).pointerups());
	});

	// awaiting events
	await when(img).loads().once()
		.after(() => img.src = '/cat.jpg');

p For more information about flows and what you can do with them, see [flows](/docs/flow/).

h3 The "s" thing

p When using ``when()``'s shorthand, a single "s" is stripped off the event name provided if there is one. To help understanding, here are some examples:

ul
	li ``when(window).scrolls()`` listens for the ``'scroll'`` event;
	li ``when(audio).pauses()`` listens for the ``'pause'`` event;
	li ``when(...inputs).change()`` listens for the ``'change'`` event;
	li ``when(window).appinstalled()`` listens for the ``'appinstalled'`` event;
	li ``when(document).DOMContentLoaded()`` listens for the ``'DOMContentLoaded'`` event;
	li ``when(fileReader).focus()`` listens for the ``'focu'`` event (probably unintentional!)
	li ``when(media).progress()`` listens for the ``'progres'`` event (also likely unintentional!)

p As demonstrated above, in some cases, an extra "s" makes for a very English-sounding expression. In other cases, the event name without the "s" looks a bit better. For almost all native events, this is merely a choice to make. For a handful of events (i.e. the ones that already end in an "s"), the shorthand does not work well; most notably "focus", "keypress", "progress" and "success" (and some variations such as "vrdisplayfocus"). For these events, use the longhand like ``when(…).does('focus')``.

p If the shorthand feels weird, keep in mind that ``.does()`` is always an option; it provides a more familiar string-based interface while retaining all the benefits that come with ``when()``.

h2 Usage notes

p To avoid monitoring, use [``monitor.ignore()``](/docs/monitor/ignore/) either around the complete ``when(…).does(…)`` (or the shorthand equivalent) and optionally also around the ``.then()`` or other methods. In particular, then ``when()`` function itself returns a "magic" object (i.e. ``Proxy``) that allows for the shorthand, and so does not by itself create the flow object, which is the part being monitored.

p Also, note that the combination of the shorthand and the existance of ``.does()`` means that it is not possible to listen to the "doe" event using the shorthand. Similarly, it is not possible to listen to the "observe" event using the shorthand, as [``when().observes()``](/docs/when/observes/) is reserved for observers. Luckily, these are not native events, so it is rather rare that they need to be listened to. If needed, use ``.does('doe')`` or ``.does('observe')`` respectively.

h2 See also

p For a very similar interface for observers (such as ``MutationObserver`` or ``ResizeObserver``), see [``when().observes()``](/docs/when/observes/).

p For more information about flows and their methods, see [flows](/docs/flow/).
