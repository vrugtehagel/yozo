// Yozo helpers are in scope
const { when, monitor } = self.yozo;

// a target is created
const target = new EventTarget();

// we listen for the __type__ event using the longhand
let __type__s = 0;
when(target).does('__type__').then(() => {
	__type__s++;
});

// a listener is created for __type__ using __options__
let __type__s = 0;
when(target).does('__type__', __options__).then(() => {
	__type__s++;
});

// a listener is created for an event that __type__s, with an s
let __type__s = 0;
when(target).__type__s().then(() => {
	__type__s++;
});

// a listener is created for the __type__ event, without s
let __type__s = 0;
when(target).__type__().then(() => {
	__type__s++;
});

// a shorthand listener is created for __type__ using __options__
let __type__s = 0;
when(target).__type__s(__options__).then(() => {
	__type__s++;
});

// a monitored listener is created for the __type__ event
let __type__s = 0;
const call = monitor(['undo'], () => {
	when(target).does('__type__').then(() => {
		__type__s++;
	});
});

// the call is undone
call.undo();

// the target dispatches the __type__ event
target.dispatchEvent(new CustomEvent('__type__'));

// the target dispatches the __type__ event twice
target.dispatchEvent(new CustomEvent('__type__'));
target.dispatchEvent(new CustomEvent('__type__'));

// no __type__ events were received
__type__s == 0

// one __type__ event was received
__type__s == 1


// TEST: the longhand functions like .addEventListener()
// Given Yozo helpers are in scope
// and a target is created
// and we listen for the ping event using the longhand
// When the target dispatches the ping event
// Then one ping event was received

// TEST: the longhand accepts options
// Given Yozo helpers are in scope
// and a target is created
// and a listener is created for ping using { once: true }
// When the target dispatches the ping event twice
// Then one ping event was received

// TEST: the shorthand works with the "s" stuck on
// Given Yozo helpers are in scope
// and a target is created
// and a listener is created for an event that pings, with an s
// When the target dispatches the ping event
// Then one ping event was received

// TEST: the shorthand works without the extra "s"
// Given Yozo helpers are in scope
// and a target is created
// and a listener is created for the ping event, without s
// When the target dispatches the ping event
// Then one ping event was received

// TEST: the shorthand accepts options
// Given Yozo helpers are in scope
// and a target is created
// and a shorthand listener is created for ping using { once: true }
// When the target dispatches the ping event twice
// Then one ping event was received

// TEST: when expressions are monitored
// Given Yozo helpers are in scope
// and a target is created
// and a monitored listener is created for the ping event
// When the call is undone
// Given the target dispatches the ping event
// Then no ping events were received
