@script
	export const layout = 'docs'
	export const title = 'Flow constructor'
	export const description = 'The flow constructor is a low-level feature, allowing flows to be used beyond the helpers Yozo offers.'

ui-callout[type=warning]
	p **Warning:** This is a low-level API. It is prone to creating memory leaks if not used with care. For general use, see the [flows](/docs/flow/) page, which covers Yozo's helper functions for common use cases such as event listeners, observers, and timers.

h2 Syntax

ui-code
	new Flow(callback);

h3 Parameters
dl
	dt ``callback``
	dd > p A function to be executed synchronously by the constructor. It receives a single argument; a ``trigger`` function. This is similar to the ``resolve`` argument in a callback to a ``Promise`` constructor, except ``trigger`` may be called any number of times, each call triggering the flow.

h3 Return value
p A new [``Flow``](/docs/flow/) object. It triggers whenever the ``trigger`` function given to the ``callback`` argument is called, or when the flow is manually triggered using [``flow.now()``](/docs/flow/now/).

h2 Examples

h3 Yozo's interval()

p Yozo provides the helper function [``interval()``](/docs/interval/), which is essentially a flowified version of ``setInterval``. Here's how it is implemented.

p The first step is to create a flow that triggers with the interval. That part is rather simple:

ui-code
	function interval(duration){
		return new Flow(trigger => {
			setInterval(trigger, duration);
		});
	}

p However, this by itself has a big lurking issue; the interval never stops. You can call [``flow.stop()``](/docs/flow/stop/) on the flow, but the ``setInterval`` will keep going.

ui-callout[type=info]
	p **Note:** when using the development bundle for Yozo, there is a warning to prevent this kind of issue. Specifically, it will throw a warning whenever a flow was stopped, but the ``trigger`` function given in the constructor is being called.

p To fix this issue, we will need to add a proper [``flow.cleanup()``](/docs/flow/cleanup/) handler:

ui-code
	function interval(duration){
		let id;
		return new Flow(trigger => {
			id = setInterval(trigger, duration);
		}).cleanup(() => {
			clearInterval(id);
		});
	}

p Now, we can use the interval function safely, and not only is it cancelable by calling ``flow.stop()``, it also automatically participates in monitored contexts. For example, when using it inside a [``connected()``](/docs/components/connected/) hook, it will cancel and clean up the ``setInterval`` whenever the component disconnects.

h3 Deno's watchFs

p The local development server for this site (which is using [Deno](https://deno.land/)), an async iterator is used to watch files. To make it much easier to throttle the amount of times the build script runs, and to end the serving after some amount of inactivity, a flow is used to wrap the file watcher. Specifically, we are wrapping the [``Deno.FsWatcher``](https://deno.land/api?s=Deno.FsWatcher) async iterator. Initially, to create the flow, we can simply do

ui-code
	const watcher = Deno.watchFs(['site', 'src']);
	const flow = new Flow(async trigger => {
		for await (const change of watcher) {
			trigger(change);
		}
	});

p This flow will now trigger whenever the watcher yields another change. However, and this is where manually creating flows gets a little sensitive; calling ``.stop()`` on the flow does _not_ cancel the watcher. If we wanted to make a wrapper function, transforming the watcher into a flow, we'd need to clean up after ourselves:

ui-code
	flow.cleanup(() => {
		watcher.close();
	});

p Now, our flow is safe, and we can easily throttle the changes to acceptable levels. Additionally, we can add a debounce to detect inactivity:

ui-code
	flow.throttle(1000)
		.then(() => build())
		.debounce(3_600_000)
		.once();

p To stop the watcher, we can simply call ``flow.stop()``.

h2 Usage notes

p All flows automatically participate in [``monitored``](/docs/monitor/undo/) contexts. The monitoring is done synchronously inside the constructor, so to prevent monitoring, ignore the constructor itself using [``monitor.ignore``](/docs/monitor/ignore/):

ui-code
	const flow = monitor.ignore(() => {
		return new Flow(trigger => { /* â€¦ */ });
	});

h2 See also

ul
	li [``Flow``](/docs/flow/)
