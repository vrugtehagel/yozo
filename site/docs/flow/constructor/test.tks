// a flow is constructed with trigger
let trigger;
const flow = new self.yozo.Flow(triggerer => {
	trigger = triggerer
});

// a tracked flow is being created with trigger
let trigger, flow;
const call = self.yozo.track.undo(() => {
	flow = new self.yozo.Flow(triggerer => {
		trigger = triggerer;
	});
});

// the tracked flow is undone
call.undo();

// triggers are monitored
let triggers = [];
flow.then(value => triggers.push(value));

// the flow is stopped
flow.stop();

// the trigger is called
trigger();

// the trigger is called with value __value__
trigger(__value__);

// __value__ exists
__value__ != undefined

// the flow did not trigger
triggers.length == 0

// the flow triggered once
triggers.length == 1

// the flow triggered with value __value__
triggers[0] == __value__


// TEST: The constructor fires the callback synchronously
// Given a flow is constructed with trigger
// Verify trigger exists

// TEST: The trigger function triggers the flow
// Given a flow is constructed with trigger
// and triggers are monitored
// When the trigger is called with value 23
// Then the flow triggered with value 23

// TEST: The trigger functions does not trigger a stopped flow
// Given a flow is constructed with trigger
// and triggers are monitored
// When the flow is stopped
// Given the trigger is called
// Then the flow did not trigger

// TEST: The flow constructor is being tracked
// Given a tracked flow is being created with trigger
// and triggers are monitored
// When the tracked flow is undone
// Given the trigger is called
// Then the flow did not trigger
