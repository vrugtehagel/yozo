// we're in a browser
if(self.Deno) return;

// the source for a component with __mode__ shadow root gets defined
const name = `my-component-${ crypto.randomUUID() }`;
const source = `
	<title>${ name }</title>

	<template mode="__mode__">
		<p>Some unnecessary element...</p>
		<div>
			<span id="query-me">Hello!</span>
		</div>
	</template>
	<script>
	const element = query('#query-me');
	window.queriedElement = element;
	</script>
`;

// the source for a component without shadow root gets defined
const name = `my-component-${ crypto.randomUUID() }`;
const source = `
	<title>${ name }</title>

	<template>
		<p>Some unnecessary element...</p>
		<div>
			<span id="query-me">Hello!</span>
		</div>
	</template>
	<script>
	const element = query('#query-me');
	window.queriedElement = element;
	</script>
`;

// the source is uploaded to a fake server
const webServer = await import('/-/js/web-server/index.js');
webServer.claim('/test/');
webServer.clear('/test/');
webServer.upload({
	src: `/test/${ name }.yz`,
	body: source
});

// the custom element is registered, created and connected
await self.yozo.register(`/test/${ name }.yz`);
const element = document.createElement(name);
document.body.append(element);

// the queried element was found
window.queriedElement

// the element was queried correctly inside the shadow root
window.queriedElement.getRootNode().host == element

// the element was queried correctly without shadow root
window.queriedElement.closest(name) == element


// TEST: Querying elements inside open shadow roots
// Given we're in a browser
// and the source for a component with open shadow root gets defined
// and the source is uploaded to a fake server
// and the custom element is registered, created and connected
// Verify the queried element was found
// and the element was queried correctly inside the shadow root

// TEST: Querying elements inside closed shadow roots
// Given we're in a browser
// and the source for a component with closed shadow root gets defined
// and the source is uploaded to a fake server
// and the custom element is registered, created and connected
// Verify the queried element was found
// and the element was queried correctly inside the shadow root

// TEST: Querying elements inside components without shadow
// Given we're in a browser
// and the source for a component without shadow root gets defined
// and the source is uploaded to a fake server
// and the custom element is registered, created and connected
// Verify the queried element was found
// and the element was queried correctly without shadow root
