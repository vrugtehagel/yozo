// we're in a browser
if(self.Deno) return;

// the recommended click-counter source code is defined
const clickCounterSource = `
	<title>click-counter</title>
	<meta attribute="amount" type="number">
	<meta method="reset">

	<template mode="open">
		<button @click="$.amount++">
			{{ $.amount }} clicks
		</button>
	</template>
	<script>
	$.reset = () => $.amount = 0;
	</script>
`;

// the manual updates click-counter source code is defined
const clickCounterSource = `
	<title>click-counter</title>
	<meta attribute="amount" type="number">
	<meta method="reset">

	<template mode="closed">
		<button>0 clicks</button>
	</template>
	<script>
	const { button } = elements;

	$.reset = () => $.amount = 0;

	connected(() => {
		when(button).clicks().then(() => {
			$.amount++;
		});
	});

	connected(() => {
		effect(() => {
			button.textContent = $.amount + ' clicks';
		});
	});
	</script>
`;

// the source is uploaded to a fake server
const webServer = await import('/-/js/web-server/index.js');
webServer.claim('/test/')
webServer.clear('/test/')
webServer.upload({
	src: '/test/click-counter.yz',
	body: clickCounterSource
});

// the click counter is registered, created and connected
await self.yozo.register('/test/click-counter.yz');
const element = document.createElement('click-counter');
const button = element.shadowRoot.querySelector('button');
document.body.append(element);

// the click counter is removed again
element.remove();

// the button is clicked
button.click();

// the element gets a microtask to update
await 'microtask'

// the reset method is called
element.reset();

// the amount property is set to __value__
element.amount = __value__;

// the button text is __text__
button.textContent.trim() == __text__

// the amount attribute is __value__
element.getAttribute('amount') == __value__

// the amount property is __value__
element.amount == __value__


// TEST: The recommended click-counter responds to clicks properly
// Given we're in a browser
// and the recommended click-counter source code is defined
// and the source is uploaded to a fake server
// and the click counter is registered, created and connected
// When the button is clicked
// and the element gets a microtask to update
// Then the button text is '1 clicks'
// and the amount attribute is '1'
// and the amount property is 1
// Finally the click counter is removed again

// TEST: The recommended click-counter's reset method works
// Given we're in a browser
// and the recommended click-counter source code is defined
// and the source is uploaded to a fake server
// and the click counter is registered, created and connected
// and the amount property is set to 23
// and the element gets a microtask to update
// Verify the button text is '23 clicks'
// When the reset method is called
// and the element gets a microtask to update
// Then the button text is '0 clicks'
// Finally the click counter is removed again

// TEST: The manual updates click-counter responds to clicks properly
// Given we're in a browser
// and the manual updates click-counter source code is defined
// and the source is uploaded to a fake server
// and the click counter is registered, created and connected
// When the button is clicked
// and the element gets a microtask to update
// Then the button text is '1 clicks'
// and the amount attribute is '1'
// and the amount property is 1
// Finally the click counter is removed again

// TEST: The manual updates click-counter's reset method works
// Given we're in a browser
// and the manual updates click-counter source code is defined
// and the source is uploaded to a fake server
// and the click counter is registered, created and connected
// and the amount property is set to 23
// and the element gets a microtask to update
// Verify the button text is '23 clicks'
// When the reset method is called
// and the element gets a microtask to update
// Then the button text is '0 clicks'
// Finally the click counter is removed again
