// we're in a browser
if(self.Deno) return;

// the user-info component is defined with first-name attribute
const name = `user-info-${ crypto.randomUUID() }`;
const source = `
	<title>${ name }</title>
	<meta attribute="first-name" type="string">
	<template mode="open">
		Hello {{ $.firstName }}
	</template>
`;

// the user-info component is defined with an age attribute
const name = `user-info-${ crypto.randomUUID() }`;
const source = `
	<title>${ name }</title>
	<meta attribute="age" type="number" default="18">
	<template mode="open">
		You are {{ $.age }} years old.
	</template>
`;

// the user-info component is defined with a boolean attribute
const name = `user-info-${ crypto.randomUUID() }`;
const source = `
	<title>${ name }</title>
	<meta attribute="sick" type="boolean" as="isSick">
	<template mode="open">
		You are {{ $.isSick ? 'sick :(' : 'healthy!' }}
	</template>
`;

// the user-info component is defined with a typeless attribute and manual property
const name = `user-info-${ crypto.randomUUID() }`;
const source = `
	<title>${ name }</title>
	<meta attribute="dateofbirth">
	<meta property="dateOfBirth">
	<template mode="open">
		Born on {{ $.dateOfBirth.toDateString() }}
	</template>
	<script>
	live.link($.$dateOfBirth, {
		get: () => new Date($.$attributes.dateofbirth),
		set: value => {
			$.$attributes.dateofbirth = value.toDateString()
		},
		changes: when($.$attributes.$dateofbirth).changes()
	});
	</script>
`;

// the source is uploaded to a fake server
const webServer = await import('/-/js/web-server/index.js');
webServer.claim('/test/');
webServer.clear('/test/');
webServer.upload({
	src: `/test/${ name }.yz`,
	body: source
});

// the component is registered, created and connected
await self.yozo.register(`/test/${ name }.yz`);
const userInfo = document.createElement(name);
document.body.append(userInfo);

// the __attribute__ attribute gets set to __value__
userInfo.setAttribute('__attribute__', __value__);

// the __property__ property gets set to __value__
userInfo.__property__ = __value__;

// one microtask elapses
await 'microtask';

// the __attribute__ attribute is equal to __value__
userInfo.getAttribute('__attribute__') == __value__

// the __property__ property is equal to __value__
userInfo.__property__ == __value__

// the rendered text is __text__
userInfo.shadowRoot.textContent.trim() == __text__

// the type of the __property__ property is __type__
typeof userInfo.__property__ == __type__


// TEST: A kebab-case string attribute gets a camelCase property
// Given we're in a browser
// and the user-info component is defined with first-name attribute
// and the source is uploaded to a fake server
// and the component is registered, created and connected
// When the first-name attribute gets set to 'John'
// Then the firstName property is equal to 'John'
// Given one microtask elapses
// Then the rendered text is 'Hello John'
// When the firstName property gets set to 'Maria'
// Then the first-name attribute is equal to 'Maria'

// TEST: A number attribute with default
// Given we're in a browser
// and the user-info component is defined with an age attribute
// and the source is uploaded to a fake server
// and the component is registered, created and connected
// Verify the age property is equal to 18
// and the type of the age property is 'number'
// When the age property gets set to '23'
// Then the age attribute is equal to '23'
// and the age property is equal to 23
// Verify the type of the age property is 'number'
// Given one microtask elapses
// Then the rendered text is 'You are 23 years old.'

// TEST: A boolean attribute with renamed property
// Given we're in a browser
// and the user-info component is defined with a boolean attribute
// and the source is uploaded to a fake server
// and the component is registered, created and connected
// Verify the isSick property is equal to false
// and the sick property is equal to undefined
// When the isSick property gets set to { foo: 23 }
// Then the isSick property is equal to true
// and the sick attribute is equal to ''
// Verify the type of the isSick property is 'boolean'

// TEST: A type-less attribute with custom property
// Given we're in a browser
// and the user-info component is defined with a typeless attribute and manual property
// and the source is uploaded to a fake server
// and the component is registered, created and connected
// Verify the type of the dateOfBirth property is 'object'
// When the dateofbirth attribute gets set to '06/28/1996'
// and one microtask elapses
// Then the rendered text is 'Born on Fri Jun 28 1996'
// When the dateOfBirth property gets set to new Date('March 2, 2000')
// Then the dateofbirth attribute is equal to 'Thu Mar 02 2000'
