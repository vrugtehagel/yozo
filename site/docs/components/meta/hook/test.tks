// we're in a browser
if(self.Deno) return;

// the form-tracker component is defined with forms property
const name = `form-tracker-${ crypto.randomUUID() }`;
const source = `
	<title>${ name }</title>
	<meta form-associated>
	<meta hook="formAssociated">
	<meta property="forms">
	<script>
	$.forms = [];
	formAssociated(form => {
		if(!form) return;
		$.forms.push(form);
	});
	</script>
`;

// the attr-tracker component is defined with attrs property
const name = `attr-tracker-${ crypto.randomUUID() }`;
const source = `
	<title>${ name }</title>
	<meta attribute="foo">
	<meta attribute="bar">
	<meta hook="attributeChanged">
	<meta property="attrs">
	<script>
	$.attrs = [];
	attributeChanged((...args) => {
		$.attrs.push(args.join(','))
	});
	</script>
`;

// the attr-tracker component is defined with change and unchange properties
const name = `attr-tracker-${ crypto.randomUUID() }`;
const source = `
	<title>${ name }</title>
	<meta attribute="foo">
	<meta hook="attributeChanged">
	<meta property="change">
	<meta property="unchange">
	<script>
	$.change = 0;
	$.unchange = 0;
	attributeChanged((...args) => {
		$.change++;
		monitor.add('undo', () => $.unchange++);
	});
	</script>
`;

// the attr-tracker component is defined with unhook on disconnected
const name = `attr-tracker-${ crypto.randomUUID() }`;
const source = `
	<title>${ name }</title>
	<meta attribute="foo">
	<meta hook="attributeChanged" unhook="disconnected">
	<meta property="change">
	<meta property="unchange">
	<script>
	$.change = 0;
	$.unchange = 0;
	attributeChanged((...args) => {
		$.change++;
		monitor.add('undo', () => $.unchange++);
	});
	</script>
`;


// the source is uploaded to a fake server
const webServer = await import('/-/js/web-server/index.js');
webServer.claim('/test/');
webServer.clear('/test/');
webServer.upload({
	src: `/test/${ name }.yz`,
	body: source
});

// the component is registered and created
await self.yozo.register(`/test/${ name }.yz`);
const element = document.createElement(name);

// a form "__name__" is created
const __name__ = document.createElement('form');
document.body.append(__name__);

// the element is appended to the "__name__" form
__name__.append(element);

// the element is appended to the body
document.body.append(element);

// the element is removed from the document
element.remove();

// the __name__ attribute is set to __value__
element.setAttribute('__name__', __value__);

// __left__ is equal to __right__
__left__ == __right__


// TEST: The formAssociated callback fires if specified
// Given we're in a browser
// and the form-tracker component is defined with forms property
// and the source is uploaded to a fake server
// and the component is registered and created
// and a form "form1" is created
// and a form "form2" is created
// When the element is appended to the "form1" form
// and the element is appended to the "form2" form
// Then element.forms[0] is equal to form1
// and element.forms[1] is equal to form2

// TEST: The attributeChanged callback fires with the right arguments
// Given we're in a browser
// and the attr-tracker component is defined with attrs property
// and the source is uploaded to a fake server
// and the component is registered and created
// When the foo attribute is set to 'abc'
// and the foo attribute is set to 'def'
// and the bar attribute is set to 'ghi'
// Then element.attrs[0] is equal to 'foo,,abc,'
// and element.attrs[1] is equal to 'foo,abc,def,'
// and element.attrs[2] is equal to 'bar,,ghi,'

// TEST: The attributeChanged callback undoes its monitored context
// Given we're in a browser
// and the attr-tracker component is defined with change and unchange properties
// and the source is uploaded to a fake server
// and the component is registered and created
// When the foo attribute is set to 'abc'
// and the foo attribute is set to 'def'
// and the foo attribute is set to 'ghi'
// Then element.change is equal to 3
// and element.unchange is equal to 2

// TEST: Unhooks undo the monitored context at the specified time
// Given we're in a browser
// and the attr-tracker component is defined with unhook on disconnected
// and the source is uploaded to a fake server
// and the component is registered and created
// and the element is appended to the body
// When the foo attribute is set to 'abc'
// When the foo attribute is set to 'def'
// Then element.change is equal to 2
// and element.unchange is equal to 1
// When the element is removed from the document
// Then element.unchange is equal to 2
// When the element is appended to the body
// and the element is removed from the document
// Then element.unchange is equal to 2
