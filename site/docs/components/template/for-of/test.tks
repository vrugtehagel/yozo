// we're in a browser
if(self.Deno) return;

// a component is defined with primitive items amd no shadow
const name = `drinks-list-${ crypto.randomUUID() }`;
const source = `
	<title>${ name }</title>
	<meta method="add">
	<template>
		<ul>
			<li #for="drink of $.drinks">
				{{ drink }}
			</li>
		</ul>
	</template>
	<script>
	$.drinks = ['water', 'tea', 'coffee', 'soda'];
	$.add = item => $.$drinks.push(item);
	</script>
`;

// a component is defined with primitive items
const name = `drinks-list-${ crypto.randomUUID() }`;
const source = `
	<title>${ name }</title>
	<meta method="add">
	<template mode="open">
		<ul>
			<li #for="drink of $.drinks">
				{{ drink }}
			</li>
		</ul>
	</template>
	<script>
	$.drinks = ['water', 'tea', 'coffee', 'soda'];
	$.add = item => $.$drinks.push(item);
	</script>
`;

// a component is defined with objects for list items
const name = `drinks-list-${ crypto.randomUUID() }`;
const source = `
	<title>${ name }</title>
	<meta method="add">
	<meta method="updateFirst">
	<template mode="open">
		<ul>
			<li #for="$drink of $.$drinks">
				{{ $drink.name }}
			</li>
		</ul>
	</template>
	<script>
	$.drinks = ['water', 'tea', 'coffee', 'soda']
		.map(name => ({ name }));
	$.add = item => $.$drinks.push({ name: item });
	$.updateFirst = item => $.$drinks.$0.name = item;
	</script>
`;

// a component is defined with primitive items and a wrapper template
const name = `drinks-list-${ crypto.randomUUID() }`;
const source = `
	<title>${ name }</title>
	<meta method="add">
	<template mode="open">
		<ul>
			<template #for="drink of $.drinks">
				<li>{{ drink }}</li>
			</template>
		</ul>
	</template>
	<script>
	$.drinks = ['water', 'tea', 'coffee', 'soda'];
	$.add = item => $.$drinks.push(item);
	</script>
`;

// a component is defined with primitive items and a class on the li
const name = `drinks-list-${ crypto.randomUUID() }`;
const source = `
	<title>${ name }</title>
	<template mode="open">
		<ul>
			<li
				#for="drink of $.drinks"
				.class-list.is-water="drink == 'water'"
			>
				{{ drink }}
			</li>
		</ul>
	</template>
	<script>
	$.drinks = ['water', 'tea', 'coffee', 'soda'];
	</script>
`;

// the source is uploaded to a fake server
const webServer = await import('/-/js/web-server/index.js');
webServer.claim('/test/');
webServer.clear('/test/');
webServer.upload({
	src: `/test/${ name }.yz`,
	body: source
});

// the component is registered, created and connected
await self.yozo.register(`/test/${ name }.yz`);
const element = document.createElement(name);
document.body.append(element);

// a drink __drink__ is added
element.add(__drink__);

// the first item gets updated to __item__
element.updateFirst(__item__);

// a microtask passes
await 'microtask';

// two microtasks pass
await 'microtask';
await 'microtask';

// the element has __amount__ list items
element.querySelectorAll('li').length == __amount__

// the element rendered __amount__ list items
element.shadowRoot.querySelectorAll('li').length == __amount__

// the first rendered item says __text__
element.shadowRoot.querySelector('li').textContent.trim() == __text__

// a li with the .is-water class exists
element.shadowRoot.querySelector('li.is-water')


// TEST: Rendering a simple list with primitive items and no shadow
// Given we're in a browser
// and a component is defined with primitive items amd no shadow
// and the source is uploaded to a fake server
// and the component is registered, created and connected
// and a microtask passes
// Verify the element has 4 list items
// When a drink 'lemonade' is added
// and a microtask passes
// Then the element has 5 list items

// TEST: Rendering a simple list with primitive items
// Given we're in a browser
// and a component is defined with primitive items
// and the source is uploaded to a fake server
// and the component is registered, created and connected
// and two microtasks pass
// Verify the element rendered 4 list items
// and the first rendered item says 'water'
// When a drink 'lemonade' is added
// and a microtask passes
// Then the element rendered 5 list items

// TEST: Rendering a simple list with objects
// Given we're in a browser
// and a component is defined with objects for list items
// and the source is uploaded to a fake server
// and the component is registered, created and connected
// and a microtask passes
// When the first item gets updated to 'lemonade'
// and a microtask passes
// Then the first rendered item says 'lemonade'

// TEST: Rendering a simple list with primitive items and a wrapper template
// Given we're in a browser
// and a component is defined with primitive items and a wrapper template
// and the source is uploaded to a fake server
// and the component is registered, created and connected
// and two microtasks pass
// Verify the element rendered 4 list items
// and the first rendered item says 'water'
// When a drink 'lemonade' is added
// and a microtask passes
// Then the element rendered 5 list items

// TEST: Rendering a simple list with primitive items and dynamic classes
// Given we're in a browser
// and a component is defined with primitive items and a class on the li
// and the source is uploaded to a fake server
// and the component is registered, created and connected
// and two microtasks pass
// Verify a li with the .is-water class exists
