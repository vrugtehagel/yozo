@script
	export const layout = 'docs'
	export const title = '<template>'
	export const description = 'Write simple, descriptive markup for components, optionally with a shadow root, using inline logic and straight-forward shorthands.'

h2 Syntax

ui-code[language=yz]
	<template>…</template>
	<template mode="…">…</template>
	<template mode="…" delegates-focus="…">…</template>
	<template mode="…" slot-assignment="…">…</template>

h3 Attributes

p Yozo reuses the native ``<template>`` element. Its usual attributes are different from its attributes in (the top level of) a Yozo component file.

p As a top-level element in a Yozo component file, it describes markup for a component. Without attributes, the markup will be placed inside (i.e. as direct children of) the element upon connecting to the DOM for the first time, removing any children it might have gotten before connecting. When using templates without shadow root, styles defined inside the [``<style>``](/docs/components/style/) element are __not__ scoped.

ui-callout[type=info]
	p **Note:** When the ``mode`` attribute is used, the attributes directly convert to the options passed to the underlying ``.attachShadow()`` call. For more information about shadow roots, see [``.attachShadow()`` on MDN](https://developer.mozilla.org/en-US/docs/Web/API/Element/attachShadow).

dl
	dt ``mode`` [[optional]]
	dd > p If provided, a shadow root is created with this as the ``mode`` option. Specifically, this is either ``"open"`` or ``"closed"``. Using an open shadow root means the shadow root is exposed through the ``.shadowRoot`` property (this is native behavior). As such, closed shadow roots are recommended for better encapsulation. Note that using shadow roots makes [``<style>``](/docs/components/style/) elements scoped.

	dt ``delegates-focus`` [[optional]]
	dd > p Equivalent to the ``delegatesFocus`` option in the options provided to ``.attachShadow()``. The only valid value as attribute is ``"true"``; leave out the attribute altogether if delegating focus is not desired.

	dt ``slot-assignment`` [[optional]]
	dd > p Equivalent to the ``slotAssignment`` option in the options provided to ``.attachShadow()``. Valid values are ``"named"`` (default) and ``"manual"``, determining whether slotted elements are automatically placed by their name (for ``"named"``) or whether slotted elements should manually be placed using ``HTMLSlotElement.assign()``.

h3 Inside the template

p The template is almost always one of the most important aspects of a component. As such, a handful of useful features exist inside the template. For those familiar with other frameworks, these probably come as no surprise:

ul
	li [``#if``](/docs/components/template/if-else) statements (with ``#else-if`` and ``#else``), as attributes, for conditional elements.
	li [``#for…of``](/docs/components/template/for-of/) loops, as an attribute, for generating a list of elements from an array (or other type of iterable).
	li [``{{'{'}}{ inline }}``](/docs/components/template/inline/) expressions, for texual interpolation (only in text nodes).
	li [``:attribute``](/docs/components/template/attributes/) expressions that reactively evaluate their value as JavaScript.
	li [``.property``](/docs/components/template/properties/) expressions that reactively set properties of elements. Also supports nested properties (e.g. ``.style.font-size=…``) and has special syntax for ``DOMTokenList`` properties (most notably ``.classList``) through, for example, ``.class-list.classname=…``.
	li [``@event``](/docs/components/template/events/) expressions, to attach event listeners inline. The listeners connect and disconnect together with the component.

h2 Examples

h3 FizzBuzz

p FizzBuzz is a basic programming task where one is asked write a program that outputs the numbers 1 through N, but every number divisible by three is replaced by "Fizz", every number divisible by 5 by "Buzz", and every number divisible by both is replaced by "FizzBuzz". For this component, we'll do the same; we'll have buttons to increase or decrease the maximum number N, and output each number (including Fizzes and Buzzes) dynamically. Note that this component could be made more efficiently (both in terms of brevity as well as runtime performance) but it is a fictional component to demonstrate template features.

ui-code[language=yz]
	<title>fizz-buzz</title>
	<meta attribute="max" type="number">
	<template mode="closed">
		<button @click="$.max--">Decrease maximum</button>
		<button @click="$.max++">Increase maximum</button>
		<output>
			<span #for="number of $.numbers">
				<template #if="number % 15 == 0">
					FizzBuzz
				</template>
				<template #else-if="number % 5 == 0">
					Buzz
				</template>
				<template #else-if="number % 3 == 0">
					Fizz
				</template>
				<template #else>
					{{'{'}}{ number }}
				</template>
			</span>
		</output>
	</template>
	<script>
	live.link($.$numbers, () => {
		return Array.from({ length: $.max })
			.map((value, index) => index + 1);
	});
	</script>
	<style>
	:host {
		display: block;
	}
	output {
		display: block;
		margin: 1rem 0;
	}
	</style>


h2 See also

ul
	li [Using shadow DOM](https://developer.mozilla.org/en-US/docs/Web/API/Web_components/Using_shadow_DOM)
	li [Web Components](https://developer.mozilla.org/en-US/docs/Web/API/Web_components)
