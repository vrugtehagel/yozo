// Yozo helpers are in scope
const { interval, monitor } = self.yozo;

// a __duration__ms interval is created that counts triggers
let triggers = 0;
const flow = interval(__duration__).then(() => {
	triggers++;
});

// a monitored interval of __duration__ms is created
let triggers = 0;
let flow;
const call = monitor(['undo'], () => {
	flow = interval(__duration__).then(() => {
		triggers++;
	});
});

// the monitored call is undone
call.undo();

// we wait for __duration__ milliseconds
await new Promise(resolve => setTimeout(resolve, __duration__));

// the interval stops
flow.stop();

// the interval fired once
triggers == 1

// the interval fired __amount__ times
triggers == __amount__


// TEST: Intervals fire with fixed delays
// Given Yozo helpers are in scope
// and a 50ms interval is created that counts triggers
// Verify the interval fired 0 times
// Given we wait for 80 milliseconds
// Verify the interval fired once
// Given we wait for 100 milliseconds
// Verify the interval fired 3 times
// Finally the interval stops

// TEST: Intervals are monitored
// Given Yozo helpers are in scope
// and a monitored interval of 20ms is created
// When the monitored call is undone
// Given we wait for 40 milliseconds
// Then the interval fired 0 times
// Finally the interval stops


