<template>
    <div id=container tabindex=0>
        <div id=selected part=selected></div>
        <div id=options part=dropdown>
            <slot></slot>
        </div>
    </div>
</template>
<script>
    define('yozo-dropdown')
    define.shadow({mode: 'closed', delegatesFocus: true})
    define.attribute('value', {type: String, default: ''})
    define.attribute('open', {type: Boolean})
    define.attribute('placeholder', {type: String, default: ''})
    define.form()

    define.property('form', function(){ return this[internals].form })
    define.method('clear', function(){
        this.value = null
    })
    define.method('toggle', function(value){
        this.open = value ?? !this.open
    })

    construct(function(){
        const selected = this[elements]('#selected')
        when(this[attributes]('value')).changes().then(() => {
            const option = [...this.children]
                .find(child => child.getAttribute('value') == this.value)
            selected.textContent = option?.textContent ?? ''
            this[internals].setFormValue(this.value || null)
        })
        when(this[attributes]('placeholder')).changes().then(() => {
            selected.dataset.placeholder = this.placeholder || '\u200b'
        })
    })

    connect(function(){
        when(this).clicks().then(event => {
            const option = [...this.children]
                .find(child => child.contains(event.target))
            if(!option) return this.toggle()
            const text = option.textContent
            this.value = option.getAttribute('value') ?? text
            this.open = false
        })
        when(document).clicks().then(event => {
            if(event.composedPath().includes(this)) return
            this.open = false
        })
    })
</script>
<style>
    :host {
        display: inline-block;
        border: 1px solid rgb(128 128 128 / 50%);
        cursor: default;
        width: 10rem;
    }
    #container { position: relative; }
    #selected {
        padding: .125rem .5rem;
        background-image: url("data:image/svg+xml,\
            %3Csvg viewBox='0 0 12 12' xmlns='http://www.w3.org/2000/svg'%3E\
                %3Cpath d='M1 4L6 9L11 4L10 3L6 7L2 3' style='fill:silver;'/%3E\
            %3C/svg%3E");
        background-position: calc(100% - .5rem) 50%;
        background-repeat: no-repeat;
        background-size: .75rem .75rem;
        background-color: white;
    }
    :host([open]) #selected {
        background-image: url("data:image/svg+xml,\
            %3Csvg viewBox='0 0 12 12' xmlns='http://www.w3.org/2000/svg'%3E\
                %3Cpath d='M1 8L6 3L11 8L10 9L6 5L2 9' style='fill:silver;'/%3E\
            %3C/svg%3E");
    }
    #selected:empty { color: rgb(128 128 128 / 50%); }
    #selected:empty::after { content: attr(data-placeholder); }
    #options {
        position: absolute;
        inset: 100% -1px auto;
        border: 1px solid silver;
        background-color: white;
    }
    :host(:not([open])) #options { display: none; }
    ::slotted(option){ padding: .125rem .5rem; }
    ::slotted(option:hover) {
        background-color: royalblue;
        color: white;
    }
</style>

