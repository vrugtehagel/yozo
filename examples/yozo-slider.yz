<template>
    <div id=container tabindex=0>
        <div id=track part=track></div>
        <div id=thumb part=thumb></div>
    </div>
</template>
<script>
    define('yozo-slider')
    define.shadow({mode: 'closed', delegatesFocus: true})
    define.attribute('value')
    define.attribute('start', {type: Number, default: 0})
    define.attribute('end', {type: Number, default: 100})
    define.attribute('step', {type: Number, default: 1})
    define.form()

    define.property('form', function(){ return this[internals].form })
    define.property('value', {
        get(){ return Number(this.getAttribute('value') ?? this.start) },
        set(value){
            return value == null
                ? this.removeAttribute('value')
                : this.setAttribute('value', value)
        }
    })

    const clamp = (min, number, max) => Math.max(min, Math.min(max, number))
    let offset

    construct(function(){
        when(this[attributes]('end')).changes()
            .then(() => this.end = Math.max(this.start, this.end))
        when(this[attributes]('start')).changes()
            .then(() => this.start = Math.min(this.start, this.end))
        when(this[attributes]('*')).changes().then(() => {
            const {step, start, end} = this
            let value = this.value
            value -= ((value + step / 2 - start) % step || 0) - step / 2
            if(step) value = Math.round((value - start) / step) * step + start
            value = clamp(start, value, end)
            this.value = value
            offset = (value - start) / (end - start) || 0
            this[internals].setFormValue(value)
            this[elements]('#container').style.setProperty('--offset', offset)
        })
    })

    connect(function(){
        const track = this[elements]('#track')
        const container = this[elements]('#container')
        when(container).pointerdowns().then(event => {
            event.preventDefault()
            const {x, width} = track.getBoundingClientRect()
            const pointermove = when(document).does.do('pointermove')
            const offset = clamp(0, (event.clientX - x) / width, 1)
            this.value = offset * (this.end - this.start) + this.start
            pointermove.result.then(event => {
                event.preventDefault()
                const offset = clamp(0, (event.clientX - x) / width, 1)
                this.value = offset * (this.end - this.start) + this.start
            })
            when(document).pointerups({once: true})
                .then(() => pointermove.undo())
        })
    })
</script>
<style>
    :host {
        display: inline-block;
        cursor: default;
        width: 10rem;
    }
    #container {
        --offset: 0;
        --percent-offset: calc(var(--offset) * 100%);
        padding: .5rem;
        position: relative;
    }
    #track {
        height: .125rem;
        background-image: linear-gradient(to right,
            royalblue 0% var(--percent-offset),
            silver var(--percent-offset) 100%
        );
        background-size: 100% 100%;
    }
    #thumb {
        position: absolute;
        inset: 0 auto auto var(--percent-offset);
        width: 1rem;
        height: 1rem;
        border-radius: 50%;
        transform: translate(calc(-1 * var(--percent-offset)), .0625rem);
        background-color: royalblue;
        transition: .08s;
    }
</style>

