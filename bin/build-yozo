#!/bin/bash

# This build script builds Yozo itself.
# We provide a dev build as well as a production build, and they go under
# dist/lib.js and dist/dev,js.
# For the production file, we remove all lines in the source that have a
# comment in them. This makes it super easy to keep the dev and production
# scripts aligned while adding additional code to the dev bundle.
# This means the original codebase (with comments) compiles to the dev bundle.

# First we move to project root for safety
cd "$(dirname "$0")/.."

# Make sure dist/ and dist/temp/ exists
mkdir -p dist/temp

# We clean up dist/temp/
rm -rf dist/temp/*

# We clone the whole source into dist/temp/
cp -R src/ dist/temp/

# Now, we find all JS files and remove lines with //-style comments
find dist/temp -type f -name "*.js" -exec sed -i "" 's/^.*\/\/$//g' {} \;

# Now bundle both the production and development versions
deno run -A https://deno.land/x/esbuild@v0.17.18/mod.js \
	lib-latest=./dist/temp/index.js \
	dev-latest=./src/index.js \
	--outdir=dist --bundle --log-level=warning \
	--minify --mangle-props=^__

# Run versioning script
deno run \
	--allow-read="dist/lib-latest.js,dist/dev-latest.js,archive/versions.json" \
	--allow-write="archive/lib-temp.js,archive/dev-temp.js" \
	versioning.js

# Save the exit status of the build
SUCCESS=$?

# Clean up temp/
rm -rf dist/temp

# If the build failed, stop here
if [[ $SUCCESS -ne 0 ]]
then
    echo "$(tput setaf 1)✘$(tput init)" \
    	"Yozo build failed."
    exit 1
fi

# Find out what size the build turned out to be
GZIP_SIZE=$(gzip < ./dist/lib-latest.js | wc -c | xargs)
BROTLI_SIZE=$(brotli -c ./dist/lib-latest.js | wc -c | xargs)

# The threshold is 5000 bytes; above that, we're failing the build
if [[ $GZIP_SIZE -ge 5000 ]]
then
    echo "$(tput setaf 1)✘$(tput init)" \
    	"Yozo build failed" \
		"($(tput setaf 1)$GZIP_SIZE$(tput init)b gzipped," \
		"$(tput setaf 8)$BROTLI_SIZE$(tput init)b brotli'd)."
    exit 1
fi

# We'll print the bundle size in a helpful color;
# below 4750 is green, above is yellow.
SIZE_COLOR=3
[[ $GZIP_SIZE -lt 4750 ]] && SIZE_COLOR=2

# And echo some output
echo "$(tput setaf 2)✓$(tput init)" \
	"Yozo build complete" \
	"($(tput setaf $SIZE_COLOR)$GZIP_SIZE$(tput init)b gzipped," \
	"$(tput setaf 8)$BROTLI_SIZE$(tput init)b brotli'd)."
